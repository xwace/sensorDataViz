// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LaserScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* YXPoint3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YXPoint3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Pose_Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Pose_Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Pose_Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Pose_Orientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Twist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Twist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Twist_Linear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Twist_Linear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odometry_Twist_Angular_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odometry_Twist_Angular_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imu_LinearAcceleration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_LinearAcceleration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imu_AngularVelocity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_AngularVelocity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imu_Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_Orientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensor_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensor_5fdata_2eproto() {
  protobuf_AddDesc_sensor_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensor_data.proto");
  GOOGLE_CHECK(file != NULL);
  LaserScan_descriptor_ = file->message_type(0);
  static const int LaserScan_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, time_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, scan_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, intensities_),
  };
  LaserScan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LaserScan_descriptor_,
      LaserScan::internal_default_instance(),
      LaserScan_offsets_,
      -1,
      -1,
      -1,
      sizeof(LaserScan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _internal_metadata_));
  YXPoint3D_descriptor_ = file->message_type(1);
  static const int YXPoint3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YXPoint3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YXPoint3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YXPoint3D, z_),
  };
  YXPoint3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YXPoint3D_descriptor_,
      YXPoint3D::internal_default_instance(),
      YXPoint3D_offsets_,
      -1,
      -1,
      -1,
      sizeof(YXPoint3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YXPoint3D, _internal_metadata_));
  PointCloud_descriptor_ = file->message_type(2);
  static const int PointCloud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, points_),
  };
  PointCloud_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::internal_default_instance(),
      PointCloud_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointCloud),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_));
  Odometry_descriptor_ = file->message_type(3);
  static const int Odometry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, header_timestamp_),
  };
  Odometry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_descriptor_,
      Odometry::internal_default_instance(),
      Odometry_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, _internal_metadata_));
  Odometry_Pose_descriptor_ = Odometry_descriptor_->nested_type(0);
  static const int Odometry_Pose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose, orientation_),
  };
  Odometry_Pose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Pose_descriptor_,
      Odometry_Pose::internal_default_instance(),
      Odometry_Pose_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Pose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose, _internal_metadata_));
  Odometry_Pose_Position_descriptor_ = Odometry_Pose_descriptor_->nested_type(0);
  static const int Odometry_Pose_Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Position, z_),
  };
  Odometry_Pose_Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Pose_Position_descriptor_,
      Odometry_Pose_Position::internal_default_instance(),
      Odometry_Pose_Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Pose_Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Position, _internal_metadata_));
  Odometry_Pose_Orientation_descriptor_ = Odometry_Pose_descriptor_->nested_type(1);
  static const int Odometry_Pose_Orientation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Orientation, w_),
  };
  Odometry_Pose_Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Pose_Orientation_descriptor_,
      Odometry_Pose_Orientation::internal_default_instance(),
      Odometry_Pose_Orientation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Pose_Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Pose_Orientation, _internal_metadata_));
  Odometry_Twist_descriptor_ = Odometry_descriptor_->nested_type(1);
  static const int Odometry_Twist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist, angular_),
  };
  Odometry_Twist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Twist_descriptor_,
      Odometry_Twist::internal_default_instance(),
      Odometry_Twist_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Twist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist, _internal_metadata_));
  Odometry_Twist_Linear_descriptor_ = Odometry_Twist_descriptor_->nested_type(0);
  static const int Odometry_Twist_Linear_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Linear, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Linear, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Linear, z_),
  };
  Odometry_Twist_Linear_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Twist_Linear_descriptor_,
      Odometry_Twist_Linear::internal_default_instance(),
      Odometry_Twist_Linear_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Twist_Linear),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Linear, _internal_metadata_));
  Odometry_Twist_Angular_descriptor_ = Odometry_Twist_descriptor_->nested_type(1);
  static const int Odometry_Twist_Angular_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Angular, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Angular, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Angular, z_),
  };
  Odometry_Twist_Angular_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Odometry_Twist_Angular_descriptor_,
      Odometry_Twist_Angular::internal_default_instance(),
      Odometry_Twist_Angular_offsets_,
      -1,
      -1,
      -1,
      sizeof(Odometry_Twist_Angular),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry_Twist_Angular, _internal_metadata_));
  Imu_descriptor_ = file->message_type(4);
  static const int Imu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, header_timestamp_),
  };
  Imu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_descriptor_,
      Imu::internal_default_instance(),
      Imu_offsets_,
      -1,
      -1,
      -1,
      sizeof(Imu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _internal_metadata_));
  Imu_LinearAcceleration_descriptor_ = Imu_descriptor_->nested_type(0);
  static const int Imu_LinearAcceleration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_LinearAcceleration, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_LinearAcceleration, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_LinearAcceleration, z_),
  };
  Imu_LinearAcceleration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_LinearAcceleration_descriptor_,
      Imu_LinearAcceleration::internal_default_instance(),
      Imu_LinearAcceleration_offsets_,
      -1,
      -1,
      -1,
      sizeof(Imu_LinearAcceleration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_LinearAcceleration, _internal_metadata_));
  Imu_AngularVelocity_descriptor_ = Imu_descriptor_->nested_type(1);
  static const int Imu_AngularVelocity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_AngularVelocity, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_AngularVelocity, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_AngularVelocity, z_),
  };
  Imu_AngularVelocity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_AngularVelocity_descriptor_,
      Imu_AngularVelocity::internal_default_instance(),
      Imu_AngularVelocity_offsets_,
      -1,
      -1,
      -1,
      sizeof(Imu_AngularVelocity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_AngularVelocity, _internal_metadata_));
  Imu_Orientation_descriptor_ = Imu_descriptor_->nested_type(2);
  static const int Imu_Orientation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Orientation, w_),
  };
  Imu_Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_Orientation_descriptor_,
      Imu_Orientation::internal_default_instance(),
      Imu_Orientation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Imu_Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Orientation, _internal_metadata_));
  SensorData_descriptor_ = file->message_type(5);
  static const int SensorData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, raw_laser_scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, laser_scan_360_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, raw_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, obs_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, nsecs_),
  };
  SensorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorData_descriptor_,
      SensorData::internal_default_instance(),
      SensorData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SensorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensor_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LaserScan_descriptor_, LaserScan::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YXPoint3D_descriptor_, YXPoint3D::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointCloud_descriptor_, PointCloud::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_descriptor_, Odometry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Pose_descriptor_, Odometry_Pose::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Pose_Position_descriptor_, Odometry_Pose_Position::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Pose_Orientation_descriptor_, Odometry_Pose_Orientation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Twist_descriptor_, Odometry_Twist::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Twist_Linear_descriptor_, Odometry_Twist_Linear::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Odometry_Twist_Angular_descriptor_, Odometry_Twist_Angular::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_descriptor_, Imu::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_LinearAcceleration_descriptor_, Imu_LinearAcceleration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_AngularVelocity_descriptor_, Imu_AngularVelocity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_Orientation_descriptor_, Imu_Orientation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorData_descriptor_, SensorData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensor_5fdata_2eproto() {
  LaserScan_default_instance_.Shutdown();
  delete LaserScan_reflection_;
  YXPoint3D_default_instance_.Shutdown();
  delete YXPoint3D_reflection_;
  PointCloud_default_instance_.Shutdown();
  delete PointCloud_reflection_;
  Odometry_default_instance_.Shutdown();
  delete Odometry_reflection_;
  Odometry_Pose_default_instance_.Shutdown();
  delete Odometry_Pose_reflection_;
  Odometry_Pose_Position_default_instance_.Shutdown();
  delete Odometry_Pose_Position_reflection_;
  Odometry_Pose_Orientation_default_instance_.Shutdown();
  delete Odometry_Pose_Orientation_reflection_;
  Odometry_Twist_default_instance_.Shutdown();
  delete Odometry_Twist_reflection_;
  Odometry_Twist_Linear_default_instance_.Shutdown();
  delete Odometry_Twist_Linear_reflection_;
  Odometry_Twist_Angular_default_instance_.Shutdown();
  delete Odometry_Twist_Angular_reflection_;
  Imu_default_instance_.Shutdown();
  delete Imu_reflection_;
  Imu_LinearAcceleration_default_instance_.Shutdown();
  delete Imu_LinearAcceleration_reflection_;
  Imu_AngularVelocity_default_instance_.Shutdown();
  delete Imu_AngularVelocity_reflection_;
  Imu_Orientation_default_instance_.Shutdown();
  delete Imu_Orientation_reflection_;
  SensorData_default_instance_.Shutdown();
  delete SensorData_reflection_;
}

void protobuf_InitDefaults_sensor_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  LaserScan_default_instance_.DefaultConstruct();
  YXPoint3D_default_instance_.DefaultConstruct();
  PointCloud_default_instance_.DefaultConstruct();
  Odometry_default_instance_.DefaultConstruct();
  Odometry_Pose_default_instance_.DefaultConstruct();
  Odometry_Pose_Position_default_instance_.DefaultConstruct();
  Odometry_Pose_Orientation_default_instance_.DefaultConstruct();
  Odometry_Twist_default_instance_.DefaultConstruct();
  Odometry_Twist_Linear_default_instance_.DefaultConstruct();
  Odometry_Twist_Angular_default_instance_.DefaultConstruct();
  Imu_default_instance_.DefaultConstruct();
  Imu_LinearAcceleration_default_instance_.DefaultConstruct();
  Imu_AngularVelocity_default_instance_.DefaultConstruct();
  Imu_Orientation_default_instance_.DefaultConstruct();
  SensorData_default_instance_.DefaultConstruct();
  LaserScan_default_instance_.get_mutable()->InitAsDefaultInstance();
  YXPoint3D_default_instance_.get_mutable()->InitAsDefaultInstance();
  PointCloud_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Pose_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Pose_Position_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Pose_Orientation_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Twist_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Twist_Linear_default_instance_.get_mutable()->InitAsDefaultInstance();
  Odometry_Twist_Angular_default_instance_.get_mutable()->InitAsDefaultInstance();
  Imu_default_instance_.get_mutable()->InitAsDefaultInstance();
  Imu_LinearAcceleration_default_instance_.get_mutable()->InitAsDefaultInstance();
  Imu_AngularVelocity_default_instance_.get_mutable()->InitAsDefaultInstance();
  Imu_Orientation_default_instance_.get_mutable()->InitAsDefaultInstance();
  SensorData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sensor_5fdata_2eproto_once_);
void protobuf_InitDefaults_sensor_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sensor_5fdata_2eproto_once_,
                 &protobuf_InitDefaults_sensor_5fdata_2eproto_impl);
}
void protobuf_AddDesc_sensor_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sensor_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sensor_data.proto\"\300\001\n\tLaserScan\022\021\n\tang"
    "le_min\030\001 \001(\005\022\021\n\tangle_max\030\002 \001(\005\022\027\n\017angle"
    "_increment\030\003 \001(\005\022\026\n\016time_increment\030\004 \001(\005"
    "\022\021\n\tscan_time\030\005 \001(\005\022\021\n\trange_min\030\006 \001(\005\022\021"
    "\n\trange_max\030\007 \001(\005\022\016\n\006ranges\030\010 \003(\005\022\023\n\013int"
    "ensities\030\t \003(\005\",\n\tYXPoint3D\022\t\n\001x\030\001 \001(\005\022\t"
    "\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"(\n\nPointCloud\022\032\n\006po"
    "ints\030\001 \003(\0132\n.YXPoint3D\"\342\003\n\010Odometry\022\034\n\004p"
    "ose\030\001 \001(\0132\016.Odometry.Pose\022\036\n\005twist\030\002 \001(\013"
    "2\017.Odometry.Twist\022\030\n\020header_timestamp\030\003 "
    "\001(\003\032\312\001\n\004Pose\022)\n\010position\030\001 \001(\0132\027.Odometr"
    "y.Pose.Position\022/\n\013orientation\030\002 \001(\0132\032.O"
    "dometry.Pose.Orientation\032+\n\010Position\022\t\n\001"
    "x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\0329\n\013Orienta"
    "tion\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\t\n"
    "\001w\030\004 \001(\005\032\260\001\n\005Twist\022&\n\006linear\030\001 \001(\0132\026.Odo"
    "metry.Twist.Linear\022(\n\007angular\030\002 \001(\0132\027.Od"
    "ometry.Twist.Angular\032)\n\006Linear\022\t\n\001x\030\001 \001("
    "\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\032*\n\007Angular\022\t\n\001x\030"
    "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"\322\002\n\003Imu\0224\n\023l"
    "inear_acceleration\030\001 \001(\0132\027.Imu.LinearAcc"
    "eleration\022.\n\020angular_velocity\030\002 \001(\0132\024.Im"
    "u.AngularVelocity\022%\n\013orientation\030\003 \001(\0132\020"
    ".Imu.Orientation\022\030\n\020header_timestamp\030\004 \001"
    "(\003\0325\n\022LinearAcceleration\022\t\n\001x\030\001 \001(\005\022\t\n\001y"
    "\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\0322\n\017AngularVelocity\022\t\n\001"
    "x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\0329\n\013Orienta"
    "tion\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\t\n"
    "\001w\030\004 \001(\005\"\334\001\n\nSensorData\022#\n\016raw_laser_sca"
    "n\030\001 \001(\0132\013.PointCloud\022#\n\016laser_scan_360\030\002"
    " \001(\0132\013.PointCloud\022$\n\017raw_point_cloud\030\003 \001"
    "(\0132\013.PointCloud\022$\n\017obs_point_cloud\030\004 \001(\013"
    "2\013.PointCloud\022\033\n\010odometry\030\005 \001(\0132\t.Odomet"
    "ry\022\014\n\004secs\030\006 \001(\003\022\r\n\005nsecs\030\007 \001(\003b\006proto3", 1359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor_data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_5fdata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sensor_5fdata_2eproto_once_);
void protobuf_AddDesc_sensor_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sensor_5fdata_2eproto_once_,
                 &protobuf_AddDesc_sensor_5fdata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_5fdata_2eproto {
  StaticDescriptorInitializer_sensor_5fdata_2eproto() {
    protobuf_AddDesc_sensor_5fdata_2eproto();
  }
} static_descriptor_initializer_sensor_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserScan::kAngleMinFieldNumber;
const int LaserScan::kAngleMaxFieldNumber;
const int LaserScan::kAngleIncrementFieldNumber;
const int LaserScan::kTimeIncrementFieldNumber;
const int LaserScan::kScanTimeFieldNumber;
const int LaserScan::kRangeMinFieldNumber;
const int LaserScan::kRangeMaxFieldNumber;
const int LaserScan::kRangesFieldNumber;
const int LaserScan::kIntensitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserScan::LaserScan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LaserScan)
}

void LaserScan::InitAsDefaultInstance() {
}

LaserScan::LaserScan(const LaserScan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LaserScan)
}

void LaserScan::SharedCtor() {
  ::memset(&angle_min_, 0, reinterpret_cast<char*>(&range_max_) -
    reinterpret_cast<char*>(&angle_min_) + sizeof(range_max_));
  _cached_size_ = 0;
}

LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:LaserScan)
  SharedDtor();
}

void LaserScan::SharedDtor() {
}

void LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserScan_descriptor_;
}

const LaserScan& LaserScan::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LaserScan> LaserScan_default_instance_;

LaserScan* LaserScan::New(::google::protobuf::Arena* arena) const {
  LaserScan* n = new LaserScan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:LaserScan)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LaserScan, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LaserScan*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(angle_min_, range_max_);

#undef ZR_HELPER_
#undef ZR_

  ranges_.Clear();
  intensities_.Clear();
}

bool LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LaserScan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 angle_min = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_angle_max;
        break;
      }

      // optional int32 angle_max = 2;
      case 2: {
        if (tag == 16) {
         parse_angle_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_angle_increment;
        break;
      }

      // optional int32 angle_increment = 3;
      case 3: {
        if (tag == 24) {
         parse_angle_increment:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_increment_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_increment;
        break;
      }

      // optional int32 time_increment = 4;
      case 4: {
        if (tag == 32) {
         parse_time_increment:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_increment_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_scan_time;
        break;
      }

      // optional int32 scan_time = 5;
      case 5: {
        if (tag == 40) {
         parse_scan_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_range_min;
        break;
      }

      // optional int32 range_min = 6;
      case 6: {
        if (tag == 48) {
         parse_range_min:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_range_max;
        break;
      }

      // optional int32 range_max = 7;
      case 7: {
        if (tag == 56) {
         parse_range_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ranges;
        break;
      }

      // repeated int32 ranges = 8;
      case 8: {
        if (tag == 66) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ranges())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_intensities;
        break;
      }

      // repeated int32 intensities = 9;
      case 9: {
        if (tag == 74) {
         parse_intensities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_intensities())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_intensities())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LaserScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LaserScan)
  return false;
#undef DO_
}

void LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LaserScan)
  // optional int32 angle_min = 1;
  if (this->angle_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle_min(), output);
  }

  // optional int32 angle_max = 2;
  if (this->angle_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle_max(), output);
  }

  // optional int32 angle_increment = 3;
  if (this->angle_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->angle_increment(), output);
  }

  // optional int32 time_increment = 4;
  if (this->time_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_increment(), output);
  }

  // optional int32 scan_time = 5;
  if (this->scan_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scan_time(), output);
  }

  // optional int32 range_min = 6;
  if (this->range_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->range_min(), output);
  }

  // optional int32 range_max = 7;
  if (this->range_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->range_max(), output);
  }

  // repeated int32 ranges = 8;
  if (this->ranges_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ranges_cached_byte_size_);
  }
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ranges(i), output);
  }

  // repeated int32 intensities = 9;
  if (this->intensities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intensities_cached_byte_size_);
  }
  for (int i = 0; i < this->intensities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->intensities(i), output);
  }

  // @@protoc_insertion_point(serialize_end:LaserScan)
}

::google::protobuf::uint8* LaserScan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LaserScan)
  // optional int32 angle_min = 1;
  if (this->angle_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle_min(), target);
  }

  // optional int32 angle_max = 2;
  if (this->angle_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle_max(), target);
  }

  // optional int32 angle_increment = 3;
  if (this->angle_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->angle_increment(), target);
  }

  // optional int32 time_increment = 4;
  if (this->time_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_increment(), target);
  }

  // optional int32 scan_time = 5;
  if (this->scan_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scan_time(), target);
  }

  // optional int32 range_min = 6;
  if (this->range_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->range_min(), target);
  }

  // optional int32 range_max = 7;
  if (this->range_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->range_max(), target);
  }

  // repeated int32 ranges = 8;
  if (this->ranges_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ranges_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ranges(i), target);
  }

  // repeated int32 intensities = 9;
  if (this->intensities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _intensities_cached_byte_size_, target);
  }
  for (int i = 0; i < this->intensities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->intensities(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LaserScan)
  return target;
}

size_t LaserScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LaserScan)
  size_t total_size = 0;

  // optional int32 angle_min = 1;
  if (this->angle_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angle_min());
  }

  // optional int32 angle_max = 2;
  if (this->angle_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angle_max());
  }

  // optional int32 angle_increment = 3;
  if (this->angle_increment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angle_increment());
  }

  // optional int32 time_increment = 4;
  if (this->time_increment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_increment());
  }

  // optional int32 scan_time = 5;
  if (this->scan_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scan_time());
  }

  // optional int32 range_min = 6;
  if (this->range_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range_min());
  }

  // optional int32 range_max = 7;
  if (this->range_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range_max());
  }

  // repeated int32 ranges = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->ranges_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ranges(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ranges_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 intensities = 9;
  {
    size_t data_size = 0;
    unsigned int count = this->intensities_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->intensities(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intensities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LaserScan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LaserScan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaserScan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LaserScan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LaserScan)
    UnsafeMergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LaserScan)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LaserScan::UnsafeMergeFrom(const LaserScan& from) {
  GOOGLE_DCHECK(&from != this);
  ranges_.UnsafeMergeFrom(from.ranges_);
  intensities_.UnsafeMergeFrom(from.intensities_);
  if (from.angle_min() != 0) {
    set_angle_min(from.angle_min());
  }
  if (from.angle_max() != 0) {
    set_angle_max(from.angle_max());
  }
  if (from.angle_increment() != 0) {
    set_angle_increment(from.angle_increment());
  }
  if (from.time_increment() != 0) {
    set_time_increment(from.time_increment());
  }
  if (from.scan_time() != 0) {
    set_scan_time(from.scan_time());
  }
  if (from.range_min() != 0) {
    set_range_min(from.range_min());
  }
  if (from.range_max() != 0) {
    set_range_max(from.range_max());
  }
}

void LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LaserScan)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LaserScan::IsInitialized() const {

  return true;
}

void LaserScan::Swap(LaserScan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserScan::InternalSwap(LaserScan* other) {
  std::swap(angle_min_, other->angle_min_);
  std::swap(angle_max_, other->angle_max_);
  std::swap(angle_increment_, other->angle_increment_);
  std::swap(time_increment_, other->time_increment_);
  std::swap(scan_time_, other->scan_time_);
  std::swap(range_min_, other->range_min_);
  std::swap(range_max_, other->range_max_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  intensities_.UnsafeArenaSwap(&other->intensities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserScan_descriptor_;
  metadata.reflection = LaserScan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaserScan

// optional int32 angle_min = 1;
void LaserScan::clear_angle_min() {
  angle_min_ = 0;
}
::google::protobuf::int32 LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:LaserScan.angle_min)
  return angle_min_;
}
void LaserScan::set_angle_min(::google::protobuf::int32 value) {
  
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.angle_min)
}

// optional int32 angle_max = 2;
void LaserScan::clear_angle_max() {
  angle_max_ = 0;
}
::google::protobuf::int32 LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:LaserScan.angle_max)
  return angle_max_;
}
void LaserScan::set_angle_max(::google::protobuf::int32 value) {
  
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.angle_max)
}

// optional int32 angle_increment = 3;
void LaserScan::clear_angle_increment() {
  angle_increment_ = 0;
}
::google::protobuf::int32 LaserScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:LaserScan.angle_increment)
  return angle_increment_;
}
void LaserScan::set_angle_increment(::google::protobuf::int32 value) {
  
  angle_increment_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.angle_increment)
}

// optional int32 time_increment = 4;
void LaserScan::clear_time_increment() {
  time_increment_ = 0;
}
::google::protobuf::int32 LaserScan::time_increment() const {
  // @@protoc_insertion_point(field_get:LaserScan.time_increment)
  return time_increment_;
}
void LaserScan::set_time_increment(::google::protobuf::int32 value) {
  
  time_increment_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.time_increment)
}

// optional int32 scan_time = 5;
void LaserScan::clear_scan_time() {
  scan_time_ = 0;
}
::google::protobuf::int32 LaserScan::scan_time() const {
  // @@protoc_insertion_point(field_get:LaserScan.scan_time)
  return scan_time_;
}
void LaserScan::set_scan_time(::google::protobuf::int32 value) {
  
  scan_time_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.scan_time)
}

// optional int32 range_min = 6;
void LaserScan::clear_range_min() {
  range_min_ = 0;
}
::google::protobuf::int32 LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:LaserScan.range_min)
  return range_min_;
}
void LaserScan::set_range_min(::google::protobuf::int32 value) {
  
  range_min_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.range_min)
}

// optional int32 range_max = 7;
void LaserScan::clear_range_max() {
  range_max_ = 0;
}
::google::protobuf::int32 LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:LaserScan.range_max)
  return range_max_;
}
void LaserScan::set_range_max(::google::protobuf::int32 value) {
  
  range_max_ = value;
  // @@protoc_insertion_point(field_set:LaserScan.range_max)
}

// repeated int32 ranges = 8;
int LaserScan::ranges_size() const {
  return ranges_.size();
}
void LaserScan::clear_ranges() {
  ranges_.Clear();
}
::google::protobuf::int32 LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:LaserScan.ranges)
  return ranges_.Get(index);
}
void LaserScan::set_ranges(int index, ::google::protobuf::int32 value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:LaserScan.ranges)
}
void LaserScan::add_ranges(::google::protobuf::int32 value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:LaserScan.ranges)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:LaserScan.ranges)
  return ranges_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:LaserScan.ranges)
  return &ranges_;
}

// repeated int32 intensities = 9;
int LaserScan::intensities_size() const {
  return intensities_.size();
}
void LaserScan::clear_intensities() {
  intensities_.Clear();
}
::google::protobuf::int32 LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:LaserScan.intensities)
  return intensities_.Get(index);
}
void LaserScan::set_intensities(int index, ::google::protobuf::int32 value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:LaserScan.intensities)
}
void LaserScan::add_intensities(::google::protobuf::int32 value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:LaserScan.intensities)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:LaserScan.intensities)
  return intensities_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:LaserScan.intensities)
  return &intensities_;
}

inline const LaserScan* LaserScan::internal_default_instance() {
  return &LaserScan_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YXPoint3D::kXFieldNumber;
const int YXPoint3D::kYFieldNumber;
const int YXPoint3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YXPoint3D::YXPoint3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:YXPoint3D)
}

void YXPoint3D::InitAsDefaultInstance() {
}

YXPoint3D::YXPoint3D(const YXPoint3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YXPoint3D)
}

void YXPoint3D::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

YXPoint3D::~YXPoint3D() {
  // @@protoc_insertion_point(destructor:YXPoint3D)
  SharedDtor();
}

void YXPoint3D::SharedDtor() {
}

void YXPoint3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YXPoint3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YXPoint3D_descriptor_;
}

const YXPoint3D& YXPoint3D::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<YXPoint3D> YXPoint3D_default_instance_;

YXPoint3D* YXPoint3D::New(::google::protobuf::Arena* arena) const {
  YXPoint3D* n = new YXPoint3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YXPoint3D::Clear() {
// @@protoc_insertion_point(message_clear_start:YXPoint3D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(YXPoint3D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YXPoint3D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool YXPoint3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YXPoint3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YXPoint3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YXPoint3D)
  return false;
#undef DO_
}

void YXPoint3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YXPoint3D)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:YXPoint3D)
}

::google::protobuf::uint8* YXPoint3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:YXPoint3D)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:YXPoint3D)
  return target;
}

size_t YXPoint3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YXPoint3D)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YXPoint3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YXPoint3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const YXPoint3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YXPoint3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YXPoint3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YXPoint3D)
    UnsafeMergeFrom(*source);
  }
}

void YXPoint3D::MergeFrom(const YXPoint3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YXPoint3D)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void YXPoint3D::UnsafeMergeFrom(const YXPoint3D& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void YXPoint3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YXPoint3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YXPoint3D::CopyFrom(const YXPoint3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YXPoint3D)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool YXPoint3D::IsInitialized() const {

  return true;
}

void YXPoint3D::Swap(YXPoint3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YXPoint3D::InternalSwap(YXPoint3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YXPoint3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YXPoint3D_descriptor_;
  metadata.reflection = YXPoint3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YXPoint3D

// optional int32 x = 1;
void YXPoint3D::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 YXPoint3D::x() const {
  // @@protoc_insertion_point(field_get:YXPoint3D.x)
  return x_;
}
void YXPoint3D::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:YXPoint3D.x)
}

// optional int32 y = 2;
void YXPoint3D::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 YXPoint3D::y() const {
  // @@protoc_insertion_point(field_get:YXPoint3D.y)
  return y_;
}
void YXPoint3D::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:YXPoint3D.y)
}

// optional int32 z = 3;
void YXPoint3D::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 YXPoint3D::z() const {
  // @@protoc_insertion_point(field_get:YXPoint3D.z)
  return z_;
}
void YXPoint3D::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:YXPoint3D.z)
}

inline const YXPoint3D* YXPoint3D::internal_default_instance() {
  return &YXPoint3D_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PointCloud)
}

void PointCloud::InitAsDefaultInstance() {
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PointCloud)
}

void PointCloud::SharedCtor() {
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PointCloud> PointCloud_default_instance_;

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:PointCloud)
  points_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .YXPoint3D points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PointCloud)
  // repeated .YXPoint3D points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PointCloud)
  // repeated .YXPoint3D points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PointCloud)
  size_t total_size = 0;

  // repeated .YXPoint3D points = 1;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PointCloud)
    UnsafeMergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PointCloud)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PointCloud::UnsafeMergeFrom(const PointCloud& from) {
  GOOGLE_DCHECK(&from != this);
  points_.MergeFrom(from.points_);
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PointCloud)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PointCloud::IsInitialized() const {

  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  points_.UnsafeArenaSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// repeated .YXPoint3D points = 1;
int PointCloud::points_size() const {
  return points_.size();
}
void PointCloud::clear_points() {
  points_.Clear();
}
const ::YXPoint3D& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:PointCloud.points)
  return points_.Get(index);
}
::YXPoint3D* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:PointCloud.points)
  return points_.Mutable(index);
}
::YXPoint3D* PointCloud::add_points() {
  // @@protoc_insertion_point(field_add:PointCloud.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::YXPoint3D >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:PointCloud.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::YXPoint3D >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:PointCloud.points)
  return points_;
}

inline const PointCloud* PointCloud::internal_default_instance() {
  return &PointCloud_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Pose_Position::kXFieldNumber;
const int Odometry_Pose_Position::kYFieldNumber;
const int Odometry_Pose_Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Pose_Position::Odometry_Pose_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Pose.Position)
}

void Odometry_Pose_Position::InitAsDefaultInstance() {
}

Odometry_Pose_Position::Odometry_Pose_Position(const Odometry_Pose_Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Pose.Position)
}

void Odometry_Pose_Position::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Odometry_Pose_Position::~Odometry_Pose_Position() {
  // @@protoc_insertion_point(destructor:Odometry.Pose.Position)
  SharedDtor();
}

void Odometry_Pose_Position::SharedDtor() {
}

void Odometry_Pose_Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Pose_Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Pose_Position_descriptor_;
}

const Odometry_Pose_Position& Odometry_Pose_Position::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Pose_Position> Odometry_Pose_Position_default_instance_;

Odometry_Pose_Position* Odometry_Pose_Position::New(::google::protobuf::Arena* arena) const {
  Odometry_Pose_Position* n = new Odometry_Pose_Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Pose_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Pose.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Odometry_Pose_Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Odometry_Pose_Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Odometry_Pose_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Pose.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Pose.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Pose.Position)
  return false;
#undef DO_
}

void Odometry_Pose_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Pose.Position)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Pose.Position)
}

::google::protobuf::uint8* Odometry_Pose_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Pose.Position)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Pose.Position)
  return target;
}

size_t Odometry_Pose_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Pose.Position)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Pose_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Pose.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Pose_Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Pose_Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Pose.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Pose.Position)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Pose_Position::MergeFrom(const Odometry_Pose_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Pose.Position)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Pose_Position::UnsafeMergeFrom(const Odometry_Pose_Position& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Odometry_Pose_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Pose.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Pose_Position::CopyFrom(const Odometry_Pose_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Pose.Position)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Pose_Position::IsInitialized() const {

  return true;
}

void Odometry_Pose_Position::Swap(Odometry_Pose_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Pose_Position::InternalSwap(Odometry_Pose_Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Pose_Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Pose_Position_descriptor_;
  metadata.reflection = Odometry_Pose_Position_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Pose_Orientation::kXFieldNumber;
const int Odometry_Pose_Orientation::kYFieldNumber;
const int Odometry_Pose_Orientation::kZFieldNumber;
const int Odometry_Pose_Orientation::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Pose_Orientation::Odometry_Pose_Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Pose.Orientation)
}

void Odometry_Pose_Orientation::InitAsDefaultInstance() {
}

Odometry_Pose_Orientation::Odometry_Pose_Orientation(const Odometry_Pose_Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Pose.Orientation)
}

void Odometry_Pose_Orientation::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  _cached_size_ = 0;
}

Odometry_Pose_Orientation::~Odometry_Pose_Orientation() {
  // @@protoc_insertion_point(destructor:Odometry.Pose.Orientation)
  SharedDtor();
}

void Odometry_Pose_Orientation::SharedDtor() {
}

void Odometry_Pose_Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Pose_Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Pose_Orientation_descriptor_;
}

const Odometry_Pose_Orientation& Odometry_Pose_Orientation::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Pose_Orientation> Odometry_Pose_Orientation_default_instance_;

Odometry_Pose_Orientation* Odometry_Pose_Orientation::New(::google::protobuf::Arena* arena) const {
  Odometry_Pose_Orientation* n = new Odometry_Pose_Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Pose_Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Pose.Orientation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Odometry_Pose_Orientation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Odometry_Pose_Orientation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Odometry_Pose_Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Pose.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }

      // optional int32 w = 4;
      case 4: {
        if (tag == 32) {
         parse_w:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Pose.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Pose.Orientation)
  return false;
#undef DO_
}

void Odometry_Pose_Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Pose.Orientation)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Pose.Orientation)
}

::google::protobuf::uint8* Odometry_Pose_Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Pose.Orientation)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Pose.Orientation)
  return target;
}

size_t Odometry_Pose_Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Pose.Orientation)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Pose_Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Pose.Orientation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Pose_Orientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Pose_Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Pose.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Pose.Orientation)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Pose_Orientation::MergeFrom(const Odometry_Pose_Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Pose.Orientation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Pose_Orientation::UnsafeMergeFrom(const Odometry_Pose_Orientation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Odometry_Pose_Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Pose.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Pose_Orientation::CopyFrom(const Odometry_Pose_Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Pose.Orientation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Pose_Orientation::IsInitialized() const {

  return true;
}

void Odometry_Pose_Orientation::Swap(Odometry_Pose_Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Pose_Orientation::InternalSwap(Odometry_Pose_Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Pose_Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Pose_Orientation_descriptor_;
  metadata.reflection = Odometry_Pose_Orientation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Pose::kPositionFieldNumber;
const int Odometry_Pose::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Pose::Odometry_Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Pose)
}

void Odometry_Pose::InitAsDefaultInstance() {
  position_ = const_cast< ::Odometry_Pose_Position*>(
      ::Odometry_Pose_Position::internal_default_instance());
  orientation_ = const_cast< ::Odometry_Pose_Orientation*>(
      ::Odometry_Pose_Orientation::internal_default_instance());
}

Odometry_Pose::Odometry_Pose(const Odometry_Pose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Pose)
}

void Odometry_Pose::SharedCtor() {
  position_ = NULL;
  orientation_ = NULL;
  _cached_size_ = 0;
}

Odometry_Pose::~Odometry_Pose() {
  // @@protoc_insertion_point(destructor:Odometry.Pose)
  SharedDtor();
}

void Odometry_Pose::SharedDtor() {
  if (this != &Odometry_Pose_default_instance_.get()) {
    delete position_;
    delete orientation_;
  }
}

void Odometry_Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Pose_descriptor_;
}

const Odometry_Pose& Odometry_Pose::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Pose> Odometry_Pose_default_instance_;

Odometry_Pose* Odometry_Pose::New(::google::protobuf::Arena* arena) const {
  Odometry_Pose* n = new Odometry_Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Pose)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}

bool Odometry_Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Odometry.Pose.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .Odometry.Pose.Orientation orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Pose)
  return false;
#undef DO_
}

void Odometry_Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Pose)
  // optional .Odometry.Pose.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .Odometry.Pose.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Pose)
}

::google::protobuf::uint8* Odometry_Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Pose)
  // optional .Odometry.Pose.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional .Odometry.Pose.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Pose)
  return target;
}

size_t Odometry_Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Pose)
  size_t total_size = 0;

  // optional .Odometry.Pose.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .Odometry.Pose.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Pose)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Pose::MergeFrom(const Odometry_Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Pose)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Pose::UnsafeMergeFrom(const Odometry_Pose& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_position()) {
    mutable_position()->::Odometry_Pose_Position::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::Odometry_Pose_Orientation::MergeFrom(from.orientation());
  }
}

void Odometry_Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Pose::CopyFrom(const Odometry_Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Pose)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Pose::IsInitialized() const {

  return true;
}

void Odometry_Pose::Swap(Odometry_Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Pose::InternalSwap(Odometry_Pose* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Pose_descriptor_;
  metadata.reflection = Odometry_Pose_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Twist_Linear::kXFieldNumber;
const int Odometry_Twist_Linear::kYFieldNumber;
const int Odometry_Twist_Linear::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Twist_Linear::Odometry_Twist_Linear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Twist.Linear)
}

void Odometry_Twist_Linear::InitAsDefaultInstance() {
}

Odometry_Twist_Linear::Odometry_Twist_Linear(const Odometry_Twist_Linear& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Twist.Linear)
}

void Odometry_Twist_Linear::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Odometry_Twist_Linear::~Odometry_Twist_Linear() {
  // @@protoc_insertion_point(destructor:Odometry.Twist.Linear)
  SharedDtor();
}

void Odometry_Twist_Linear::SharedDtor() {
}

void Odometry_Twist_Linear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Twist_Linear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Twist_Linear_descriptor_;
}

const Odometry_Twist_Linear& Odometry_Twist_Linear::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Twist_Linear> Odometry_Twist_Linear_default_instance_;

Odometry_Twist_Linear* Odometry_Twist_Linear::New(::google::protobuf::Arena* arena) const {
  Odometry_Twist_Linear* n = new Odometry_Twist_Linear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Twist_Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Twist.Linear)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Odometry_Twist_Linear, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Odometry_Twist_Linear*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Odometry_Twist_Linear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Twist.Linear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Twist.Linear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Twist.Linear)
  return false;
#undef DO_
}

void Odometry_Twist_Linear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Twist.Linear)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Twist.Linear)
}

::google::protobuf::uint8* Odometry_Twist_Linear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Twist.Linear)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Twist.Linear)
  return target;
}

size_t Odometry_Twist_Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Twist.Linear)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Twist_Linear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Twist.Linear)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Twist_Linear* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Twist_Linear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Twist.Linear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Twist.Linear)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Twist_Linear::MergeFrom(const Odometry_Twist_Linear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Twist.Linear)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Twist_Linear::UnsafeMergeFrom(const Odometry_Twist_Linear& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Odometry_Twist_Linear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Twist.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Twist_Linear::CopyFrom(const Odometry_Twist_Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Twist.Linear)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Twist_Linear::IsInitialized() const {

  return true;
}

void Odometry_Twist_Linear::Swap(Odometry_Twist_Linear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Twist_Linear::InternalSwap(Odometry_Twist_Linear* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Twist_Linear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Twist_Linear_descriptor_;
  metadata.reflection = Odometry_Twist_Linear_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Twist_Angular::kXFieldNumber;
const int Odometry_Twist_Angular::kYFieldNumber;
const int Odometry_Twist_Angular::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Twist_Angular::Odometry_Twist_Angular()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Twist.Angular)
}

void Odometry_Twist_Angular::InitAsDefaultInstance() {
}

Odometry_Twist_Angular::Odometry_Twist_Angular(const Odometry_Twist_Angular& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Twist.Angular)
}

void Odometry_Twist_Angular::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Odometry_Twist_Angular::~Odometry_Twist_Angular() {
  // @@protoc_insertion_point(destructor:Odometry.Twist.Angular)
  SharedDtor();
}

void Odometry_Twist_Angular::SharedDtor() {
}

void Odometry_Twist_Angular::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Twist_Angular::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Twist_Angular_descriptor_;
}

const Odometry_Twist_Angular& Odometry_Twist_Angular::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Twist_Angular> Odometry_Twist_Angular_default_instance_;

Odometry_Twist_Angular* Odometry_Twist_Angular::New(::google::protobuf::Arena* arena) const {
  Odometry_Twist_Angular* n = new Odometry_Twist_Angular;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Twist_Angular::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Twist.Angular)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Odometry_Twist_Angular, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Odometry_Twist_Angular*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Odometry_Twist_Angular::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Twist.Angular)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Twist.Angular)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Twist.Angular)
  return false;
#undef DO_
}

void Odometry_Twist_Angular::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Twist.Angular)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Twist.Angular)
}

::google::protobuf::uint8* Odometry_Twist_Angular::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Twist.Angular)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Twist.Angular)
  return target;
}

size_t Odometry_Twist_Angular::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Twist.Angular)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Twist_Angular::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Twist.Angular)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Twist_Angular* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Twist_Angular>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Twist.Angular)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Twist.Angular)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Twist_Angular::MergeFrom(const Odometry_Twist_Angular& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Twist.Angular)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Twist_Angular::UnsafeMergeFrom(const Odometry_Twist_Angular& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Odometry_Twist_Angular::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Twist.Angular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Twist_Angular::CopyFrom(const Odometry_Twist_Angular& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Twist.Angular)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Twist_Angular::IsInitialized() const {

  return true;
}

void Odometry_Twist_Angular::Swap(Odometry_Twist_Angular* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Twist_Angular::InternalSwap(Odometry_Twist_Angular* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Twist_Angular::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Twist_Angular_descriptor_;
  metadata.reflection = Odometry_Twist_Angular_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry_Twist::kLinearFieldNumber;
const int Odometry_Twist::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry_Twist::Odometry_Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry.Twist)
}

void Odometry_Twist::InitAsDefaultInstance() {
  linear_ = const_cast< ::Odometry_Twist_Linear*>(
      ::Odometry_Twist_Linear::internal_default_instance());
  angular_ = const_cast< ::Odometry_Twist_Angular*>(
      ::Odometry_Twist_Angular::internal_default_instance());
}

Odometry_Twist::Odometry_Twist(const Odometry_Twist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry.Twist)
}

void Odometry_Twist::SharedCtor() {
  linear_ = NULL;
  angular_ = NULL;
  _cached_size_ = 0;
}

Odometry_Twist::~Odometry_Twist() {
  // @@protoc_insertion_point(destructor:Odometry.Twist)
  SharedDtor();
}

void Odometry_Twist::SharedDtor() {
  if (this != &Odometry_Twist_default_instance_.get()) {
    delete linear_;
    delete angular_;
  }
}

void Odometry_Twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry_Twist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_Twist_descriptor_;
}

const Odometry_Twist& Odometry_Twist::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry_Twist> Odometry_Twist_default_instance_;

Odometry_Twist* Odometry_Twist::New(::google::protobuf::Arena* arena) const {
  Odometry_Twist* n = new Odometry_Twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry_Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry.Twist)
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}

bool Odometry_Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry.Twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Odometry.Twist.Linear linear = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angular;
        break;
      }

      // optional .Odometry.Twist.Angular angular = 2;
      case 2: {
        if (tag == 18) {
         parse_angular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry.Twist)
  return false;
#undef DO_
}

void Odometry_Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry.Twist)
  // optional .Odometry.Twist.Linear linear = 1;
  if (this->has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // optional .Odometry.Twist.Angular angular = 2;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry.Twist)
}

::google::protobuf::uint8* Odometry_Twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry.Twist)
  // optional .Odometry.Twist.Linear linear = 1;
  if (this->has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linear_, false, target);
  }

  // optional .Odometry.Twist.Angular angular = 2;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angular_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry.Twist)
  return target;
}

size_t Odometry_Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry.Twist)
  size_t total_size = 0;

  // optional .Odometry.Twist.Linear linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  // optional .Odometry.Twist.Angular angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry_Twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry.Twist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry_Twist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry_Twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry.Twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry.Twist)
    UnsafeMergeFrom(*source);
  }
}

void Odometry_Twist::MergeFrom(const Odometry_Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry.Twist)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry_Twist::UnsafeMergeFrom(const Odometry_Twist& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_linear()) {
    mutable_linear()->::Odometry_Twist_Linear::MergeFrom(from.linear());
  }
  if (from.has_angular()) {
    mutable_angular()->::Odometry_Twist_Angular::MergeFrom(from.angular());
  }
}

void Odometry_Twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry_Twist::CopyFrom(const Odometry_Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry.Twist)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry_Twist::IsInitialized() const {

  return true;
}

void Odometry_Twist::Swap(Odometry_Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry_Twist::InternalSwap(Odometry_Twist* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry_Twist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_Twist_descriptor_;
  metadata.reflection = Odometry_Twist_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry::kPoseFieldNumber;
const int Odometry::kTwistFieldNumber;
const int Odometry::kHeaderTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry::Odometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Odometry)
}

void Odometry::InitAsDefaultInstance() {
  pose_ = const_cast< ::Odometry_Pose*>(
      ::Odometry_Pose::internal_default_instance());
  twist_ = const_cast< ::Odometry_Twist*>(
      ::Odometry_Twist::internal_default_instance());
}

Odometry::Odometry(const Odometry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Odometry)
}

void Odometry::SharedCtor() {
  pose_ = NULL;
  twist_ = NULL;
  header_timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  if (this != &Odometry_default_instance_.get()) {
    delete pose_;
    delete twist_;
  }
}

void Odometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odometry_descriptor_;
}

const Odometry& Odometry::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Odometry> Odometry_default_instance_;

Odometry* Odometry::New(::google::protobuf::Arena* arena) const {
  Odometry* n = new Odometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:Odometry)
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
  header_timestamp_ = GOOGLE_LONGLONG(0);
}

bool Odometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Odometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Odometry.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_twist;
        break;
      }

      // optional .Odometry.Twist twist = 2;
      case 2: {
        if (tag == 18) {
         parse_twist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_header_timestamp;
        break;
      }

      // optional int64 header_timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_header_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &header_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Odometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Odometry)
  return false;
#undef DO_
}

void Odometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Odometry)
  // optional .Odometry.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // optional .Odometry.Twist twist = 2;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->twist_, output);
  }

  // optional int64 header_timestamp = 3;
  if (this->header_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->header_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Odometry)
}

::google::protobuf::uint8* Odometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Odometry)
  // optional .Odometry.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, false, target);
  }

  // optional .Odometry.Twist twist = 2;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->twist_, false, target);
  }

  // optional int64 header_timestamp = 3;
  if (this->header_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->header_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odometry)
  size_t total_size = 0;

  // optional .Odometry.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // optional .Odometry.Twist twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->twist_);
  }

  // optional int64 header_timestamp = 3;
  if (this->header_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->header_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Odometry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Odometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Odometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Odometry)
    UnsafeMergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Odometry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Odometry::UnsafeMergeFrom(const Odometry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_pose()) {
    mutable_pose()->::Odometry_Pose::MergeFrom(from.pose());
  }
  if (from.has_twist()) {
    mutable_twist()->::Odometry_Twist::MergeFrom(from.twist());
  }
  if (from.header_timestamp() != 0) {
    set_header_timestamp(from.header_timestamp());
  }
}

void Odometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odometry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Odometry::IsInitialized() const {

  return true;
}

void Odometry::Swap(Odometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry::InternalSwap(Odometry* other) {
  std::swap(pose_, other->pose_);
  std::swap(twist_, other->twist_);
  std::swap(header_timestamp_, other->header_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odometry_descriptor_;
  metadata.reflection = Odometry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Odometry_Pose_Position

// optional int32 x = 1;
void Odometry_Pose_Position::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Position::x() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Position.x)
  return x_;
}
void Odometry_Pose_Position::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Position.x)
}

// optional int32 y = 2;
void Odometry_Pose_Position::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Position::y() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Position.y)
  return y_;
}
void Odometry_Pose_Position::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Position.y)
}

// optional int32 z = 3;
void Odometry_Pose_Position::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Position::z() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Position.z)
  return z_;
}
void Odometry_Pose_Position::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Position.z)
}

inline const Odometry_Pose_Position* Odometry_Pose_Position::internal_default_instance() {
  return &Odometry_Pose_Position_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry_Pose_Orientation

// optional int32 x = 1;
void Odometry_Pose_Orientation::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Orientation::x() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Orientation.x)
  return x_;
}
void Odometry_Pose_Orientation::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Orientation.x)
}

// optional int32 y = 2;
void Odometry_Pose_Orientation::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Orientation::y() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Orientation.y)
  return y_;
}
void Odometry_Pose_Orientation::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Orientation.y)
}

// optional int32 z = 3;
void Odometry_Pose_Orientation::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Orientation::z() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Orientation.z)
  return z_;
}
void Odometry_Pose_Orientation::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Orientation.z)
}

// optional int32 w = 4;
void Odometry_Pose_Orientation::clear_w() {
  w_ = 0;
}
::google::protobuf::int32 Odometry_Pose_Orientation::w() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.Orientation.w)
  return w_;
}
void Odometry_Pose_Orientation::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Pose.Orientation.w)
}

inline const Odometry_Pose_Orientation* Odometry_Pose_Orientation::internal_default_instance() {
  return &Odometry_Pose_Orientation_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry_Pose

// optional .Odometry.Pose.Position position = 1;
bool Odometry_Pose::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void Odometry_Pose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::Odometry_Pose_Position& Odometry_Pose::position() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.position)
  return position_ != NULL ? *position_
                         : *::Odometry_Pose_Position::internal_default_instance();
}
::Odometry_Pose_Position* Odometry_Pose::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::Odometry_Pose_Position;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.Pose.position)
  return position_;
}
::Odometry_Pose_Position* Odometry_Pose::release_position() {
  // @@protoc_insertion_point(field_release:Odometry.Pose.position)
  
  ::Odometry_Pose_Position* temp = position_;
  position_ = NULL;
  return temp;
}
void Odometry_Pose::set_allocated_position(::Odometry_Pose_Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.Pose.position)
}

// optional .Odometry.Pose.Orientation orientation = 2;
bool Odometry_Pose::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
void Odometry_Pose::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::Odometry_Pose_Orientation& Odometry_Pose::orientation() const {
  // @@protoc_insertion_point(field_get:Odometry.Pose.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::Odometry_Pose_Orientation::internal_default_instance();
}
::Odometry_Pose_Orientation* Odometry_Pose::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::Odometry_Pose_Orientation;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.Pose.orientation)
  return orientation_;
}
::Odometry_Pose_Orientation* Odometry_Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:Odometry.Pose.orientation)
  
  ::Odometry_Pose_Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Odometry_Pose::set_allocated_orientation(::Odometry_Pose_Orientation* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.Pose.orientation)
}

inline const Odometry_Pose* Odometry_Pose::internal_default_instance() {
  return &Odometry_Pose_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry_Twist_Linear

// optional int32 x = 1;
void Odometry_Twist_Linear::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Linear::x() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Linear.x)
  return x_;
}
void Odometry_Twist_Linear::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Linear.x)
}

// optional int32 y = 2;
void Odometry_Twist_Linear::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Linear::y() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Linear.y)
  return y_;
}
void Odometry_Twist_Linear::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Linear.y)
}

// optional int32 z = 3;
void Odometry_Twist_Linear::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Linear::z() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Linear.z)
  return z_;
}
void Odometry_Twist_Linear::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Linear.z)
}

inline const Odometry_Twist_Linear* Odometry_Twist_Linear::internal_default_instance() {
  return &Odometry_Twist_Linear_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry_Twist_Angular

// optional int32 x = 1;
void Odometry_Twist_Angular::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Angular::x() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Angular.x)
  return x_;
}
void Odometry_Twist_Angular::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Angular.x)
}

// optional int32 y = 2;
void Odometry_Twist_Angular::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Angular::y() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Angular.y)
  return y_;
}
void Odometry_Twist_Angular::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Angular.y)
}

// optional int32 z = 3;
void Odometry_Twist_Angular::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Odometry_Twist_Angular::z() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.Angular.z)
  return z_;
}
void Odometry_Twist_Angular::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Odometry.Twist.Angular.z)
}

inline const Odometry_Twist_Angular* Odometry_Twist_Angular::internal_default_instance() {
  return &Odometry_Twist_Angular_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry_Twist

// optional .Odometry.Twist.Linear linear = 1;
bool Odometry_Twist::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
void Odometry_Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
const ::Odometry_Twist_Linear& Odometry_Twist::linear() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.linear)
  return linear_ != NULL ? *linear_
                         : *::Odometry_Twist_Linear::internal_default_instance();
}
::Odometry_Twist_Linear* Odometry_Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::Odometry_Twist_Linear;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.Twist.linear)
  return linear_;
}
::Odometry_Twist_Linear* Odometry_Twist::release_linear() {
  // @@protoc_insertion_point(field_release:Odometry.Twist.linear)
  
  ::Odometry_Twist_Linear* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Odometry_Twist::set_allocated_linear(::Odometry_Twist_Linear* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.Twist.linear)
}

// optional .Odometry.Twist.Angular angular = 2;
bool Odometry_Twist::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
void Odometry_Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::Odometry_Twist_Angular& Odometry_Twist::angular() const {
  // @@protoc_insertion_point(field_get:Odometry.Twist.angular)
  return angular_ != NULL ? *angular_
                         : *::Odometry_Twist_Angular::internal_default_instance();
}
::Odometry_Twist_Angular* Odometry_Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::Odometry_Twist_Angular;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.Twist.angular)
  return angular_;
}
::Odometry_Twist_Angular* Odometry_Twist::release_angular() {
  // @@protoc_insertion_point(field_release:Odometry.Twist.angular)
  
  ::Odometry_Twist_Angular* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Odometry_Twist::set_allocated_angular(::Odometry_Twist_Angular* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.Twist.angular)
}

inline const Odometry_Twist* Odometry_Twist::internal_default_instance() {
  return &Odometry_Twist_default_instance_.get();
}
// -------------------------------------------------------------------

// Odometry

// optional .Odometry.Pose pose = 1;
bool Odometry::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void Odometry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::Odometry_Pose& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:Odometry.pose)
  return pose_ != NULL ? *pose_
                         : *::Odometry_Pose::internal_default_instance();
}
::Odometry_Pose* Odometry::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::Odometry_Pose;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.pose)
  return pose_;
}
::Odometry_Pose* Odometry::release_pose() {
  // @@protoc_insertion_point(field_release:Odometry.pose)
  
  ::Odometry_Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Odometry::set_allocated_pose(::Odometry_Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.pose)
}

// optional .Odometry.Twist twist = 2;
bool Odometry::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
void Odometry::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
const ::Odometry_Twist& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:Odometry.twist)
  return twist_ != NULL ? *twist_
                         : *::Odometry_Twist::internal_default_instance();
}
::Odometry_Twist* Odometry::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::Odometry_Twist;
  }
  // @@protoc_insertion_point(field_mutable:Odometry.twist)
  return twist_;
}
::Odometry_Twist* Odometry::release_twist() {
  // @@protoc_insertion_point(field_release:Odometry.twist)
  
  ::Odometry_Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
void Odometry::set_allocated_twist(::Odometry_Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Odometry.twist)
}

// optional int64 header_timestamp = 3;
void Odometry::clear_header_timestamp() {
  header_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Odometry::header_timestamp() const {
  // @@protoc_insertion_point(field_get:Odometry.header_timestamp)
  return header_timestamp_;
}
void Odometry::set_header_timestamp(::google::protobuf::int64 value) {
  
  header_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Odometry.header_timestamp)
}

inline const Odometry* Odometry::internal_default_instance() {
  return &Odometry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu_LinearAcceleration::kXFieldNumber;
const int Imu_LinearAcceleration::kYFieldNumber;
const int Imu_LinearAcceleration::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu_LinearAcceleration::Imu_LinearAcceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imu.LinearAcceleration)
}

void Imu_LinearAcceleration::InitAsDefaultInstance() {
}

Imu_LinearAcceleration::Imu_LinearAcceleration(const Imu_LinearAcceleration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imu.LinearAcceleration)
}

void Imu_LinearAcceleration::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Imu_LinearAcceleration::~Imu_LinearAcceleration() {
  // @@protoc_insertion_point(destructor:Imu.LinearAcceleration)
  SharedDtor();
}

void Imu_LinearAcceleration::SharedDtor() {
}

void Imu_LinearAcceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu_LinearAcceleration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_LinearAcceleration_descriptor_;
}

const Imu_LinearAcceleration& Imu_LinearAcceleration::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Imu_LinearAcceleration> Imu_LinearAcceleration_default_instance_;

Imu_LinearAcceleration* Imu_LinearAcceleration::New(::google::protobuf::Arena* arena) const {
  Imu_LinearAcceleration* n = new Imu_LinearAcceleration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu_LinearAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:Imu.LinearAcceleration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Imu_LinearAcceleration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Imu_LinearAcceleration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Imu_LinearAcceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imu.LinearAcceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imu.LinearAcceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imu.LinearAcceleration)
  return false;
#undef DO_
}

void Imu_LinearAcceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imu.LinearAcceleration)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Imu.LinearAcceleration)
}

::google::protobuf::uint8* Imu_LinearAcceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Imu.LinearAcceleration)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Imu.LinearAcceleration)
  return target;
}

size_t Imu_LinearAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Imu.LinearAcceleration)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu_LinearAcceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imu.LinearAcceleration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Imu_LinearAcceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu_LinearAcceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imu.LinearAcceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imu.LinearAcceleration)
    UnsafeMergeFrom(*source);
  }
}

void Imu_LinearAcceleration::MergeFrom(const Imu_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imu.LinearAcceleration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Imu_LinearAcceleration::UnsafeMergeFrom(const Imu_LinearAcceleration& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Imu_LinearAcceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imu.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu_LinearAcceleration::CopyFrom(const Imu_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imu.LinearAcceleration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Imu_LinearAcceleration::IsInitialized() const {

  return true;
}

void Imu_LinearAcceleration::Swap(Imu_LinearAcceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu_LinearAcceleration::InternalSwap(Imu_LinearAcceleration* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu_LinearAcceleration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_LinearAcceleration_descriptor_;
  metadata.reflection = Imu_LinearAcceleration_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu_AngularVelocity::kXFieldNumber;
const int Imu_AngularVelocity::kYFieldNumber;
const int Imu_AngularVelocity::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu_AngularVelocity::Imu_AngularVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imu.AngularVelocity)
}

void Imu_AngularVelocity::InitAsDefaultInstance() {
}

Imu_AngularVelocity::Imu_AngularVelocity(const Imu_AngularVelocity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imu.AngularVelocity)
}

void Imu_AngularVelocity::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Imu_AngularVelocity::~Imu_AngularVelocity() {
  // @@protoc_insertion_point(destructor:Imu.AngularVelocity)
  SharedDtor();
}

void Imu_AngularVelocity::SharedDtor() {
}

void Imu_AngularVelocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu_AngularVelocity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_AngularVelocity_descriptor_;
}

const Imu_AngularVelocity& Imu_AngularVelocity::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Imu_AngularVelocity> Imu_AngularVelocity_default_instance_;

Imu_AngularVelocity* Imu_AngularVelocity::New(::google::protobuf::Arena* arena) const {
  Imu_AngularVelocity* n = new Imu_AngularVelocity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu_AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:Imu.AngularVelocity)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Imu_AngularVelocity, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Imu_AngularVelocity*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Imu_AngularVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imu.AngularVelocity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imu.AngularVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imu.AngularVelocity)
  return false;
#undef DO_
}

void Imu_AngularVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imu.AngularVelocity)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Imu.AngularVelocity)
}

::google::protobuf::uint8* Imu_AngularVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Imu.AngularVelocity)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Imu.AngularVelocity)
  return target;
}

size_t Imu_AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Imu.AngularVelocity)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu_AngularVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imu.AngularVelocity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Imu_AngularVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu_AngularVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imu.AngularVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imu.AngularVelocity)
    UnsafeMergeFrom(*source);
  }
}

void Imu_AngularVelocity::MergeFrom(const Imu_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imu.AngularVelocity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Imu_AngularVelocity::UnsafeMergeFrom(const Imu_AngularVelocity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Imu_AngularVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imu.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu_AngularVelocity::CopyFrom(const Imu_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imu.AngularVelocity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Imu_AngularVelocity::IsInitialized() const {

  return true;
}

void Imu_AngularVelocity::Swap(Imu_AngularVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu_AngularVelocity::InternalSwap(Imu_AngularVelocity* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu_AngularVelocity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_AngularVelocity_descriptor_;
  metadata.reflection = Imu_AngularVelocity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu_Orientation::kXFieldNumber;
const int Imu_Orientation::kYFieldNumber;
const int Imu_Orientation::kZFieldNumber;
const int Imu_Orientation::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu_Orientation::Imu_Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imu.Orientation)
}

void Imu_Orientation::InitAsDefaultInstance() {
}

Imu_Orientation::Imu_Orientation(const Imu_Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imu.Orientation)
}

void Imu_Orientation::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  _cached_size_ = 0;
}

Imu_Orientation::~Imu_Orientation() {
  // @@protoc_insertion_point(destructor:Imu.Orientation)
  SharedDtor();
}

void Imu_Orientation::SharedDtor() {
}

void Imu_Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu_Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_Orientation_descriptor_;
}

const Imu_Orientation& Imu_Orientation::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Imu_Orientation> Imu_Orientation_default_instance_;

Imu_Orientation* Imu_Orientation::New(::google::protobuf::Arena* arena) const {
  Imu_Orientation* n = new Imu_Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu_Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:Imu.Orientation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Imu_Orientation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Imu_Orientation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Imu_Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imu.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }

      // optional int32 w = 4;
      case 4: {
        if (tag == 32) {
         parse_w:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imu.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imu.Orientation)
  return false;
#undef DO_
}

void Imu_Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imu.Orientation)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:Imu.Orientation)
}

::google::protobuf::uint8* Imu_Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Imu.Orientation)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Imu.Orientation)
  return target;
}

size_t Imu_Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Imu.Orientation)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  // optional int32 w = 4;
  if (this->w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu_Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imu.Orientation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Imu_Orientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu_Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imu.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imu.Orientation)
    UnsafeMergeFrom(*source);
  }
}

void Imu_Orientation::MergeFrom(const Imu_Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imu.Orientation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Imu_Orientation::UnsafeMergeFrom(const Imu_Orientation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Imu_Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imu.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu_Orientation::CopyFrom(const Imu_Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imu.Orientation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Imu_Orientation::IsInitialized() const {

  return true;
}

void Imu_Orientation::Swap(Imu_Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu_Orientation::InternalSwap(Imu_Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu_Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_Orientation_descriptor_;
  metadata.reflection = Imu_Orientation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kLinearAccelerationFieldNumber;
const int Imu::kAngularVelocityFieldNumber;
const int Imu::kOrientationFieldNumber;
const int Imu::kHeaderTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imu)
}

void Imu::InitAsDefaultInstance() {
  linear_acceleration_ = const_cast< ::Imu_LinearAcceleration*>(
      ::Imu_LinearAcceleration::internal_default_instance());
  angular_velocity_ = const_cast< ::Imu_AngularVelocity*>(
      ::Imu_AngularVelocity::internal_default_instance());
  orientation_ = const_cast< ::Imu_Orientation*>(
      ::Imu_Orientation::internal_default_instance());
}

Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imu)
}

void Imu::SharedCtor() {
  linear_acceleration_ = NULL;
  angular_velocity_ = NULL;
  orientation_ = NULL;
  header_timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != &Imu_default_instance_.get()) {
    delete linear_acceleration_;
    delete angular_velocity_;
    delete orientation_;
  }
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_descriptor_;
}

const Imu& Imu::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Imu> Imu_default_instance_;

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:Imu)
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  header_timestamp_ = GOOGLE_LONGLONG(0);
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Imu.LinearAcceleration linear_acceleration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angular_velocity;
        break;
      }

      // optional .Imu.AngularVelocity angular_velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .Imu.Orientation orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_header_timestamp;
        break;
      }

      // optional int64 header_timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_header_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &header_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imu)
  // optional .Imu.LinearAcceleration linear_acceleration = 1;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_acceleration_, output);
  }

  // optional .Imu.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_velocity_, output);
  }

  // optional .Imu.Orientation orientation = 3;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // optional int64 header_timestamp = 4;
  if (this->header_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->header_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Imu)
  // optional .Imu.LinearAcceleration linear_acceleration = 1;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linear_acceleration_, false, target);
  }

  // optional .Imu.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angular_velocity_, false, target);
  }

  // optional .Imu.Orientation orientation = 3;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, false, target);
  }

  // optional int64 header_timestamp = 4;
  if (this->header_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->header_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Imu)
  size_t total_size = 0;

  // optional .Imu.LinearAcceleration linear_acceleration = 1;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // optional .Imu.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // optional .Imu.Orientation orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional int64 header_timestamp = 4;
  if (this->header_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->header_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imu)
    UnsafeMergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imu)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Imu::UnsafeMergeFrom(const Imu& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::Imu_LinearAcceleration::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::Imu_AngularVelocity::MergeFrom(from.angular_velocity());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::Imu_Orientation::MergeFrom(from.orientation());
  }
  if (from.header_timestamp() != 0) {
    set_header_timestamp(from.header_timestamp());
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imu)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Imu::IsInitialized() const {

  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(orientation_, other->orientation_);
  std::swap(header_timestamp_, other->header_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_descriptor_;
  metadata.reflection = Imu_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imu_LinearAcceleration

// optional int32 x = 1;
void Imu_LinearAcceleration::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Imu_LinearAcceleration::x() const {
  // @@protoc_insertion_point(field_get:Imu.LinearAcceleration.x)
  return x_;
}
void Imu_LinearAcceleration::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Imu.LinearAcceleration.x)
}

// optional int32 y = 2;
void Imu_LinearAcceleration::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Imu_LinearAcceleration::y() const {
  // @@protoc_insertion_point(field_get:Imu.LinearAcceleration.y)
  return y_;
}
void Imu_LinearAcceleration::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Imu.LinearAcceleration.y)
}

// optional int32 z = 3;
void Imu_LinearAcceleration::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Imu_LinearAcceleration::z() const {
  // @@protoc_insertion_point(field_get:Imu.LinearAcceleration.z)
  return z_;
}
void Imu_LinearAcceleration::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Imu.LinearAcceleration.z)
}

inline const Imu_LinearAcceleration* Imu_LinearAcceleration::internal_default_instance() {
  return &Imu_LinearAcceleration_default_instance_.get();
}
// -------------------------------------------------------------------

// Imu_AngularVelocity

// optional int32 x = 1;
void Imu_AngularVelocity::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Imu_AngularVelocity::x() const {
  // @@protoc_insertion_point(field_get:Imu.AngularVelocity.x)
  return x_;
}
void Imu_AngularVelocity::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Imu.AngularVelocity.x)
}

// optional int32 y = 2;
void Imu_AngularVelocity::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Imu_AngularVelocity::y() const {
  // @@protoc_insertion_point(field_get:Imu.AngularVelocity.y)
  return y_;
}
void Imu_AngularVelocity::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Imu.AngularVelocity.y)
}

// optional int32 z = 3;
void Imu_AngularVelocity::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Imu_AngularVelocity::z() const {
  // @@protoc_insertion_point(field_get:Imu.AngularVelocity.z)
  return z_;
}
void Imu_AngularVelocity::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Imu.AngularVelocity.z)
}

inline const Imu_AngularVelocity* Imu_AngularVelocity::internal_default_instance() {
  return &Imu_AngularVelocity_default_instance_.get();
}
// -------------------------------------------------------------------

// Imu_Orientation

// optional int32 x = 1;
void Imu_Orientation::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Imu_Orientation::x() const {
  // @@protoc_insertion_point(field_get:Imu.Orientation.x)
  return x_;
}
void Imu_Orientation::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Imu.Orientation.x)
}

// optional int32 y = 2;
void Imu_Orientation::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Imu_Orientation::y() const {
  // @@protoc_insertion_point(field_get:Imu.Orientation.y)
  return y_;
}
void Imu_Orientation::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Imu.Orientation.y)
}

// optional int32 z = 3;
void Imu_Orientation::clear_z() {
  z_ = 0;
}
::google::protobuf::int32 Imu_Orientation::z() const {
  // @@protoc_insertion_point(field_get:Imu.Orientation.z)
  return z_;
}
void Imu_Orientation::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Imu.Orientation.z)
}

// optional int32 w = 4;
void Imu_Orientation::clear_w() {
  w_ = 0;
}
::google::protobuf::int32 Imu_Orientation::w() const {
  // @@protoc_insertion_point(field_get:Imu.Orientation.w)
  return w_;
}
void Imu_Orientation::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Imu.Orientation.w)
}

inline const Imu_Orientation* Imu_Orientation::internal_default_instance() {
  return &Imu_Orientation_default_instance_.get();
}
// -------------------------------------------------------------------

// Imu

// optional .Imu.LinearAcceleration linear_acceleration = 1;
bool Imu::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
void Imu::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::Imu_LinearAcceleration& Imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:Imu.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::Imu_LinearAcceleration::internal_default_instance();
}
::Imu_LinearAcceleration* Imu::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::Imu_LinearAcceleration;
  }
  // @@protoc_insertion_point(field_mutable:Imu.linear_acceleration)
  return linear_acceleration_;
}
::Imu_LinearAcceleration* Imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:Imu.linear_acceleration)
  
  ::Imu_LinearAcceleration* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void Imu::set_allocated_linear_acceleration(::Imu_LinearAcceleration* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Imu.linear_acceleration)
}

// optional .Imu.AngularVelocity angular_velocity = 2;
bool Imu::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void Imu::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::Imu_AngularVelocity& Imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:Imu.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::Imu_AngularVelocity::internal_default_instance();
}
::Imu_AngularVelocity* Imu::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::Imu_AngularVelocity;
  }
  // @@protoc_insertion_point(field_mutable:Imu.angular_velocity)
  return angular_velocity_;
}
::Imu_AngularVelocity* Imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:Imu.angular_velocity)
  
  ::Imu_AngularVelocity* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Imu::set_allocated_angular_velocity(::Imu_AngularVelocity* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Imu.angular_velocity)
}

// optional .Imu.Orientation orientation = 3;
bool Imu::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
void Imu::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::Imu_Orientation& Imu::orientation() const {
  // @@protoc_insertion_point(field_get:Imu.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::Imu_Orientation::internal_default_instance();
}
::Imu_Orientation* Imu::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::Imu_Orientation;
  }
  // @@protoc_insertion_point(field_mutable:Imu.orientation)
  return orientation_;
}
::Imu_Orientation* Imu::release_orientation() {
  // @@protoc_insertion_point(field_release:Imu.orientation)
  
  ::Imu_Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Imu::set_allocated_orientation(::Imu_Orientation* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Imu.orientation)
}

// optional int64 header_timestamp = 4;
void Imu::clear_header_timestamp() {
  header_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Imu::header_timestamp() const {
  // @@protoc_insertion_point(field_get:Imu.header_timestamp)
  return header_timestamp_;
}
void Imu::set_header_timestamp(::google::protobuf::int64 value) {
  
  header_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Imu.header_timestamp)
}

inline const Imu* Imu::internal_default_instance() {
  return &Imu_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kRawLaserScanFieldNumber;
const int SensorData::kLaserScan360FieldNumber;
const int SensorData::kRawPointCloudFieldNumber;
const int SensorData::kObsPointCloudFieldNumber;
const int SensorData::kOdometryFieldNumber;
const int SensorData::kSecsFieldNumber;
const int SensorData::kNsecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorData)
}

void SensorData::InitAsDefaultInstance() {
  raw_laser_scan_ = const_cast< ::PointCloud*>(
      ::PointCloud::internal_default_instance());
  laser_scan_360_ = const_cast< ::PointCloud*>(
      ::PointCloud::internal_default_instance());
  raw_point_cloud_ = const_cast< ::PointCloud*>(
      ::PointCloud::internal_default_instance());
  obs_point_cloud_ = const_cast< ::PointCloud*>(
      ::PointCloud::internal_default_instance());
  odometry_ = const_cast< ::Odometry*>(
      ::Odometry::internal_default_instance());
}

SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorData)
}

void SensorData::SharedCtor() {
  raw_laser_scan_ = NULL;
  laser_scan_360_ = NULL;
  raw_point_cloud_ = NULL;
  obs_point_cloud_ = NULL;
  odometry_ = NULL;
  ::memset(&secs_, 0, reinterpret_cast<char*>(&nsecs_) -
    reinterpret_cast<char*>(&secs_) + sizeof(nsecs_));
  _cached_size_ = 0;
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != &SensorData_default_instance_.get()) {
    delete raw_laser_scan_;
    delete laser_scan_360_;
    delete raw_point_cloud_;
    delete obs_point_cloud_;
    delete odometry_;
  }
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorData_descriptor_;
}

const SensorData& SensorData::default_instance() {
  protobuf_InitDefaults_sensor_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SensorData> SensorData_default_instance_;

SensorData* SensorData::New(::google::protobuf::Arena* arena) const {
  SensorData* n = new SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SensorData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SensorData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(secs_, nsecs_);
  if (GetArenaNoVirtual() == NULL && raw_laser_scan_ != NULL) delete raw_laser_scan_;
  raw_laser_scan_ = NULL;
  if (GetArenaNoVirtual() == NULL && laser_scan_360_ != NULL) delete laser_scan_360_;
  laser_scan_360_ = NULL;
  if (GetArenaNoVirtual() == NULL && raw_point_cloud_ != NULL) delete raw_point_cloud_;
  raw_point_cloud_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_point_cloud_ != NULL) delete obs_point_cloud_;
  obs_point_cloud_ = NULL;
  if (GetArenaNoVirtual() == NULL && odometry_ != NULL) delete odometry_;
  odometry_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PointCloud raw_laser_scan = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_laser_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_laser_scan_360;
        break;
      }

      // optional .PointCloud laser_scan_360 = 2;
      case 2: {
        if (tag == 18) {
         parse_laser_scan_360:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_scan_360()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_raw_point_cloud;
        break;
      }

      // optional .PointCloud raw_point_cloud = 3;
      case 3: {
        if (tag == 26) {
         parse_raw_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_point_cloud()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_obs_point_cloud;
        break;
      }

      // optional .PointCloud obs_point_cloud = 4;
      case 4: {
        if (tag == 34) {
         parse_obs_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obs_point_cloud()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_odometry;
        break;
      }

      // optional .Odometry odometry = 5;
      case 5: {
        if (tag == 42) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_secs;
        break;
      }

      // optional int64 secs = 6;
      case 6: {
        if (tag == 48) {
         parse_secs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secs_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nsecs;
        break;
      }

      // optional int64 nsecs = 7;
      case 7: {
        if (tag == 56) {
         parse_nsecs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nsecs_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorData)
  // optional .PointCloud raw_laser_scan = 1;
  if (this->has_raw_laser_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->raw_laser_scan_, output);
  }

  // optional .PointCloud laser_scan_360 = 2;
  if (this->has_laser_scan_360()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->laser_scan_360_, output);
  }

  // optional .PointCloud raw_point_cloud = 3;
  if (this->has_raw_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->raw_point_cloud_, output);
  }

  // optional .PointCloud obs_point_cloud = 4;
  if (this->has_obs_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->obs_point_cloud_, output);
  }

  // optional .Odometry odometry = 5;
  if (this->has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->odometry_, output);
  }

  // optional int64 secs = 6;
  if (this->secs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->secs(), output);
  }

  // optional int64 nsecs = 7;
  if (this->nsecs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nsecs(), output);
  }

  // @@protoc_insertion_point(serialize_end:SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SensorData)
  // optional .PointCloud raw_laser_scan = 1;
  if (this->has_raw_laser_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->raw_laser_scan_, false, target);
  }

  // optional .PointCloud laser_scan_360 = 2;
  if (this->has_laser_scan_360()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->laser_scan_360_, false, target);
  }

  // optional .PointCloud raw_point_cloud = 3;
  if (this->has_raw_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->raw_point_cloud_, false, target);
  }

  // optional .PointCloud obs_point_cloud = 4;
  if (this->has_obs_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->obs_point_cloud_, false, target);
  }

  // optional .Odometry odometry = 5;
  if (this->has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->odometry_, false, target);
  }

  // optional int64 secs = 6;
  if (this->secs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->secs(), target);
  }

  // optional int64 nsecs = 7;
  if (this->nsecs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nsecs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorData)
  size_t total_size = 0;

  // optional .PointCloud raw_laser_scan = 1;
  if (this->has_raw_laser_scan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->raw_laser_scan_);
  }

  // optional .PointCloud laser_scan_360 = 2;
  if (this->has_laser_scan_360()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->laser_scan_360_);
  }

  // optional .PointCloud raw_point_cloud = 3;
  if (this->has_raw_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->raw_point_cloud_);
  }

  // optional .PointCloud obs_point_cloud = 4;
  if (this->has_obs_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->obs_point_cloud_);
  }

  // optional .Odometry odometry = 5;
  if (this->has_odometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odometry_);
  }

  // optional int64 secs = 6;
  if (this->secs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->secs());
  }

  // optional int64 nsecs = 7;
  if (this->nsecs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nsecs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorData)
    UnsafeMergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SensorData::UnsafeMergeFrom(const SensorData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_raw_laser_scan()) {
    mutable_raw_laser_scan()->::PointCloud::MergeFrom(from.raw_laser_scan());
  }
  if (from.has_laser_scan_360()) {
    mutable_laser_scan_360()->::PointCloud::MergeFrom(from.laser_scan_360());
  }
  if (from.has_raw_point_cloud()) {
    mutable_raw_point_cloud()->::PointCloud::MergeFrom(from.raw_point_cloud());
  }
  if (from.has_obs_point_cloud()) {
    mutable_obs_point_cloud()->::PointCloud::MergeFrom(from.obs_point_cloud());
  }
  if (from.has_odometry()) {
    mutable_odometry()->::Odometry::MergeFrom(from.odometry());
  }
  if (from.secs() != 0) {
    set_secs(from.secs());
  }
  if (from.nsecs() != 0) {
    set_nsecs(from.nsecs());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SensorData::IsInitialized() const {

  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  std::swap(raw_laser_scan_, other->raw_laser_scan_);
  std::swap(laser_scan_360_, other->laser_scan_360_);
  std::swap(raw_point_cloud_, other->raw_point_cloud_);
  std::swap(obs_point_cloud_, other->obs_point_cloud_);
  std::swap(odometry_, other->odometry_);
  std::swap(secs_, other->secs_);
  std::swap(nsecs_, other->nsecs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorData_descriptor_;
  metadata.reflection = SensorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorData

// optional .PointCloud raw_laser_scan = 1;
bool SensorData::has_raw_laser_scan() const {
  return this != internal_default_instance() && raw_laser_scan_ != NULL;
}
void SensorData::clear_raw_laser_scan() {
  if (GetArenaNoVirtual() == NULL && raw_laser_scan_ != NULL) delete raw_laser_scan_;
  raw_laser_scan_ = NULL;
}
const ::PointCloud& SensorData::raw_laser_scan() const {
  // @@protoc_insertion_point(field_get:SensorData.raw_laser_scan)
  return raw_laser_scan_ != NULL ? *raw_laser_scan_
                         : *::PointCloud::internal_default_instance();
}
::PointCloud* SensorData::mutable_raw_laser_scan() {
  
  if (raw_laser_scan_ == NULL) {
    raw_laser_scan_ = new ::PointCloud;
  }
  // @@protoc_insertion_point(field_mutable:SensorData.raw_laser_scan)
  return raw_laser_scan_;
}
::PointCloud* SensorData::release_raw_laser_scan() {
  // @@protoc_insertion_point(field_release:SensorData.raw_laser_scan)
  
  ::PointCloud* temp = raw_laser_scan_;
  raw_laser_scan_ = NULL;
  return temp;
}
void SensorData::set_allocated_raw_laser_scan(::PointCloud* raw_laser_scan) {
  delete raw_laser_scan_;
  raw_laser_scan_ = raw_laser_scan;
  if (raw_laser_scan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorData.raw_laser_scan)
}

// optional .PointCloud laser_scan_360 = 2;
bool SensorData::has_laser_scan_360() const {
  return this != internal_default_instance() && laser_scan_360_ != NULL;
}
void SensorData::clear_laser_scan_360() {
  if (GetArenaNoVirtual() == NULL && laser_scan_360_ != NULL) delete laser_scan_360_;
  laser_scan_360_ = NULL;
}
const ::PointCloud& SensorData::laser_scan_360() const {
  // @@protoc_insertion_point(field_get:SensorData.laser_scan_360)
  return laser_scan_360_ != NULL ? *laser_scan_360_
                         : *::PointCloud::internal_default_instance();
}
::PointCloud* SensorData::mutable_laser_scan_360() {
  
  if (laser_scan_360_ == NULL) {
    laser_scan_360_ = new ::PointCloud;
  }
  // @@protoc_insertion_point(field_mutable:SensorData.laser_scan_360)
  return laser_scan_360_;
}
::PointCloud* SensorData::release_laser_scan_360() {
  // @@protoc_insertion_point(field_release:SensorData.laser_scan_360)
  
  ::PointCloud* temp = laser_scan_360_;
  laser_scan_360_ = NULL;
  return temp;
}
void SensorData::set_allocated_laser_scan_360(::PointCloud* laser_scan_360) {
  delete laser_scan_360_;
  laser_scan_360_ = laser_scan_360;
  if (laser_scan_360) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorData.laser_scan_360)
}

// optional .PointCloud raw_point_cloud = 3;
bool SensorData::has_raw_point_cloud() const {
  return this != internal_default_instance() && raw_point_cloud_ != NULL;
}
void SensorData::clear_raw_point_cloud() {
  if (GetArenaNoVirtual() == NULL && raw_point_cloud_ != NULL) delete raw_point_cloud_;
  raw_point_cloud_ = NULL;
}
const ::PointCloud& SensorData::raw_point_cloud() const {
  // @@protoc_insertion_point(field_get:SensorData.raw_point_cloud)
  return raw_point_cloud_ != NULL ? *raw_point_cloud_
                         : *::PointCloud::internal_default_instance();
}
::PointCloud* SensorData::mutable_raw_point_cloud() {
  
  if (raw_point_cloud_ == NULL) {
    raw_point_cloud_ = new ::PointCloud;
  }
  // @@protoc_insertion_point(field_mutable:SensorData.raw_point_cloud)
  return raw_point_cloud_;
}
::PointCloud* SensorData::release_raw_point_cloud() {
  // @@protoc_insertion_point(field_release:SensorData.raw_point_cloud)
  
  ::PointCloud* temp = raw_point_cloud_;
  raw_point_cloud_ = NULL;
  return temp;
}
void SensorData::set_allocated_raw_point_cloud(::PointCloud* raw_point_cloud) {
  delete raw_point_cloud_;
  raw_point_cloud_ = raw_point_cloud;
  if (raw_point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorData.raw_point_cloud)
}

// optional .PointCloud obs_point_cloud = 4;
bool SensorData::has_obs_point_cloud() const {
  return this != internal_default_instance() && obs_point_cloud_ != NULL;
}
void SensorData::clear_obs_point_cloud() {
  if (GetArenaNoVirtual() == NULL && obs_point_cloud_ != NULL) delete obs_point_cloud_;
  obs_point_cloud_ = NULL;
}
const ::PointCloud& SensorData::obs_point_cloud() const {
  // @@protoc_insertion_point(field_get:SensorData.obs_point_cloud)
  return obs_point_cloud_ != NULL ? *obs_point_cloud_
                         : *::PointCloud::internal_default_instance();
}
::PointCloud* SensorData::mutable_obs_point_cloud() {
  
  if (obs_point_cloud_ == NULL) {
    obs_point_cloud_ = new ::PointCloud;
  }
  // @@protoc_insertion_point(field_mutable:SensorData.obs_point_cloud)
  return obs_point_cloud_;
}
::PointCloud* SensorData::release_obs_point_cloud() {
  // @@protoc_insertion_point(field_release:SensorData.obs_point_cloud)
  
  ::PointCloud* temp = obs_point_cloud_;
  obs_point_cloud_ = NULL;
  return temp;
}
void SensorData::set_allocated_obs_point_cloud(::PointCloud* obs_point_cloud) {
  delete obs_point_cloud_;
  obs_point_cloud_ = obs_point_cloud;
  if (obs_point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorData.obs_point_cloud)
}

// optional .Odometry odometry = 5;
bool SensorData::has_odometry() const {
  return this != internal_default_instance() && odometry_ != NULL;
}
void SensorData::clear_odometry() {
  if (GetArenaNoVirtual() == NULL && odometry_ != NULL) delete odometry_;
  odometry_ = NULL;
}
const ::Odometry& SensorData::odometry() const {
  // @@protoc_insertion_point(field_get:SensorData.odometry)
  return odometry_ != NULL ? *odometry_
                         : *::Odometry::internal_default_instance();
}
::Odometry* SensorData::mutable_odometry() {
  
  if (odometry_ == NULL) {
    odometry_ = new ::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:SensorData.odometry)
  return odometry_;
}
::Odometry* SensorData::release_odometry() {
  // @@protoc_insertion_point(field_release:SensorData.odometry)
  
  ::Odometry* temp = odometry_;
  odometry_ = NULL;
  return temp;
}
void SensorData::set_allocated_odometry(::Odometry* odometry) {
  delete odometry_;
  odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorData.odometry)
}

// optional int64 secs = 6;
void SensorData::clear_secs() {
  secs_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SensorData::secs() const {
  // @@protoc_insertion_point(field_get:SensorData.secs)
  return secs_;
}
void SensorData::set_secs(::google::protobuf::int64 value) {
  
  secs_ = value;
  // @@protoc_insertion_point(field_set:SensorData.secs)
}

// optional int64 nsecs = 7;
void SensorData::clear_nsecs() {
  nsecs_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SensorData::nsecs() const {
  // @@protoc_insertion_point(field_get:SensorData.nsecs)
  return nsecs_;
}
void SensorData::set_nsecs(::google::protobuf::int64 value) {
  
  nsecs_ = value;
  // @@protoc_insertion_point(field_set:SensorData.nsecs)
}

inline const SensorData* SensorData::internal_default_instance() {
  return &SensorData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
